name: pipeline
on:
  push:
    branches:
      - main
      - Caike_pipeline

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
        
jobs:
  teste-unitario:
    runs-on: ubuntu-latest

    steps:
    - name: Checagem do codigo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configuracao java
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'
        
    - name: Entra na pasta App
      run: |
        cd app

    - name: Exectar testes unitarios
      run: |
       cd app
       mvn test

  code-analysis:
    runs-on: ubuntu-latest
    needs: teste-unitario

    steps:
    - name: Checagem do codigo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('app/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Navigate to the app directory
      run: |
        cd app

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: 2d908eaa7a840db5bf8ae8b1f51940a981c278c5
      run: |
        cd app
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=caikeburgos_app-fastfood-application -Dsonar.login=$SONAR_TOKEN

    - name: Check Quality Gate
      env:
        SONAR_TOKEN: 2d908eaa7a840db5bf8ae8b1f51940a981c278c5
      run: |
        curl -s "https://sonarcloud.io/project/configuration?id=caikeburgos_app-fastfood-application" -H "Authorization: Basic $SONAR_TOKEN"
         
  build:
    needs: [teste-unitario] 
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Build
      run: |
        cd app
        mvn clean install 
        cd target
        mkdir app
        ls -la
        chmod 777 app
        mv *.jar app
        cd app
        mv *.jar app-fastfood.jar
        ls -la 
   
    - name: Upload jar 
      uses: actions/upload-artifact@v2
      with:
        name: app
        path: '${{ github.workspace }}/app/target/app/app-fastfood.jar' 
      
  publish-docker:
  
    runs-on: ubuntu-latest
    needs: 
     - build
     - code-analysis
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download jar 
      uses: actions/download-artifact@v2
      with:
        name: app
        path: '${{ github.workspace }}/app'

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: caikemury
        password: shakiralanadelrey
    
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3
      
    # - name: Build and push
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     file: ${{ github.workspace }}/app/Dockerfile
    #     push: true
    #     tags: caikemury/appfastfood:latest
    - name: DOCKER BUILD AND PUSH
      run: |
        docker build -t caikemury/appfastfood:latest .
        docker push caikemury/appfastfood:latest

  deploy-eks:
    runs-on: ubuntu-latest
    needs: 
     - publish-docker

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      run: |
        echo ${{ secrets.AWS_ACCESS_KEY_ID }} > aws_access_key_id
        echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} > aws_secret_access_key
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region us-east-1

    - name: Deploy to EKS
      run: |
        aws eks --region us-east-1 update-kubeconfig --name my-eks-cluster
        kubectl apply -f infra
        kubectl config view
        kubectl get nodes
        kubectl get pods
        kubectl get deployments
        
       
        
        # Fetch the logs of all pods
        #pods=$(kubectl get pods --all-namespaces -o jsonpath='{.items[*].metadata.name}')
        #for pod in $pods
        #do
          #echo "Fetching logs for pod $pod"
          #kubectl logs $pod
       #done
        
